# Makefile.in generated by automake 1.15.1 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2017 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



VPATH = ../.././src
am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/robotworld-0.2.0
pkgincludedir = $(includedir)/robotworld-0.2.0
pkglibdir = $(libdir)/robotworld-0.2.0
pkglibexecdir = $(libexecdir)/robotworld-0.2.0
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-pc-linux-gnu
host_triplet = x86_64-pc-linux-gnu
bin_PROGRAMS = robotworld$(EXEEXT)
subdir = src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/boost.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/m4/wxwin.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
am__installdirs = "$(DESTDIR)$(bindir)"
PROGRAMS = $(bin_PROGRAMS)
am_robotworld_OBJECTS = robotworld-AbstractActuator.$(OBJEXT) \
	robotworld-AbstractAgent.$(OBJEXT) \
	robotworld-AbstractSensor.$(OBJEXT) robotworld-AStar.$(OBJEXT) \
	robotworld-BoundedVector.$(OBJEXT) \
	robotworld-CommunicationService.$(OBJEXT) \
	robotworld-DebugTraceFunction.$(OBJEXT) \
	robotworld-Goal.$(OBJEXT) robotworld-GoalShape.$(OBJEXT) \
	robotworld-LaserDistanceSensor.$(OBJEXT) \
	robotworld-LineShape.$(OBJEXT) robotworld-Logger.$(OBJEXT) \
	robotworld-LogTextCtrl.$(OBJEXT) robotworld-Main.$(OBJEXT) \
	robotworld-MainApplication.$(OBJEXT) \
	robotworld-MainFrameWindow.$(OBJEXT) \
	robotworld-MathUtils.$(OBJEXT) \
	robotworld-ModelObject.$(OBJEXT) \
	robotworld-NotificationHandler.$(OBJEXT) \
	robotworld-Notifier.$(OBJEXT) robotworld-ObjectId.$(OBJEXT) \
	robotworld-Observer.$(OBJEXT) \
	robotworld-RectangleShape.$(OBJEXT) robotworld-Robot.$(OBJEXT) \
	robotworld-RobotShape.$(OBJEXT) \
	robotworld-RobotWorld.$(OBJEXT) \
	robotworld-RobotWorldCanvas.$(OBJEXT) \
	robotworld-Shape2DUtils.$(OBJEXT) \
	robotworld-StdOutDebugTraceFunction.$(OBJEXT) \
	robotworld-SteeringActuator.$(OBJEXT) \
	robotworld-ViewObject.$(OBJEXT) robotworld-Wall.$(OBJEXT) \
	robotworld-WallShape.$(OBJEXT) robotworld-WayPoint.$(OBJEXT) \
	robotworld-WayPointShape.$(OBJEXT) \
	robotworld-WidgetDebugTraceFunction.$(OBJEXT) \
	robotworld-Widgets.$(OBJEXT)
robotworld_OBJECTS = $(am_robotworld_OBJECTS)
am__DEPENDENCIES_1 =
robotworld_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am__v_lt_1 = 
robotworld_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(robotworld_CXXFLAGS) \
	$(CXXFLAGS) $(robotworld_LDFLAGS) $(LDFLAGS) -o $@
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
DEFAULT_INCLUDES = -I. -I$(srcdir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
AM_V_CXX = $(am__v_CXX_$(V))
am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
am__v_CXX_0 = @echo "  CXX     " $@;
am__v_CXX_1 = 
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) $(AM_V_lt) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CXXLD = $(am__v_CXXLD_$(V))
am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
am__v_CXXLD_0 = @echo "  CXXLD   " $@;
am__v_CXXLD_1 = 
SOURCES = $(robotworld_SOURCES)
DIST_SOURCES = $(robotworld_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \
	$(LISP)config.h.in
# Read a list of newline-separated strings from the standard input,
# and print each of them once, without duplicates.  Input order is
# *not* preserved.
am__uniquify_input = $(AWK) '\
  BEGIN { nonempty = 0; } \
  { items[$$0] = 1; nonempty = 1; } \
  END { if (nonempty) { for (i in items) print i; }; } \
'
# Make sure the list of sources is unique.  This is necessary because,
# e.g., the same source file might be shared among _SOURCES variables
# for different programs/libraries.
am__define_uniq_tagged_files = \
  list='$(am__tagged_files)'; \
  unique=`for i in $$list; do \
    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
  done | $(am__uniquify_input)`
ETAGS = etags
CTAGS = ctags
am__DIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/config.h.in \
	$(top_srcdir)/depcomp
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/hemmy/Downloads/robotworld_20200922/missing aclocal-1.15
AMTAR = $${TAR-tar}
AM_CFLAGS =  -Og -p -pg -g3 -Wall -Wextra -Wconversion
AM_CPPFLAGS =  -DDEVELOPMENT
AM_CXXFLAGS =  -Og -p -pg -g3 -Wall -Wextra -Wconversion
AM_DEFAULT_VERBOSITY = 1
AM_LDFLAGS = -no-undefined
AM_LIBTOOLFLAGS = --silent
AR = ar
AUTOCONF = ${SHELL} /home/hemmy/Downloads/robotworld_20200922/missing autoconf
AUTOHEADER = ${SHELL} /home/hemmy/Downloads/robotworld_20200922/missing autoheader
AUTOMAKE = ${SHELL} /home/hemmy/Downloads/robotworld_20200922/missing automake-1.15
AWK = mawk
BOOST_CHRONO_LDFLAGS = 
BOOST_CHRONO_LDPATH = 
BOOST_CHRONO_LIBS = -lboost_chrono
BOOST_CPPFLAGS =  -pthread
BOOST_DATE_TIME_LDFLAGS = 
BOOST_DATE_TIME_LDPATH = 
BOOST_DATE_TIME_LIBS = -lboost_date_time
BOOST_FILESYSTEM_LDFLAGS = 
BOOST_FILESYSTEM_LDPATH = 
BOOST_FILESYSTEM_LIBS = -lboost_filesystem
BOOST_LDFLAGS = 
BOOST_LDPATH = 
BOOST_LIBS = -lboost_system -lboost_thread -lboost_system -pthread  -lboost_filesystem -lboost_chrono
BOOST_REGEX_LDFLAGS = 
BOOST_REGEX_LDPATH = 
BOOST_REGEX_LIBS = -lboost_regex
BOOST_ROOT = 
BOOST_SERIALIZATION_LDFLAGS = 
BOOST_SERIALIZATION_LDPATH = 
BOOST_SERIALIZATION_LIBS = -lboost_serialization
BOOST_SYSTEM_LDFLAGS = 
BOOST_SYSTEM_LDPATH = 
BOOST_SYSTEM_LIBS = -lboost_system
BOOST_THREAD_LDFLAGS = 
BOOST_THREAD_LDPATH = 
BOOST_THREAD_LIBS = -lboost_thread -lboost_system -pthread 
BOOST_UNIT_TEST_FRAMEWORK_LDFLAGS = 
BOOST_UNIT_TEST_FRAMEWORK_LDPATH = 
BOOST_UNIT_TEST_FRAMEWORK_LIBS = -lboost_unit_test_framework
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = 
CPP = gcc -E
CPPCHECK = cppcheck
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = 
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DISTCHECK_CONFIGURE_FLAGS =  '--with-boost='
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GREP = /bin/grep
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LD = /usr/bin/ld -m elf_x86_64
LDFLAGS = 
LIBOBJS = 
LIBS = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
LT_SYS_LIBRARY_PATH = 
MAKEINFO = ${SHELL} /home/hemmy/Downloads/robotworld_20200922/missing makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
NM = /usr/bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = robotworld-0.2.0
PACKAGE_BUGREPORT = J.Kraaijeveld@askesis.nl
PACKAGE_NAME = robotworld
PACKAGE_STRING = robotworld 0.2.0
PACKAGE_TARNAME = robotworld-0.2.0
PACKAGE_URL = 
PACKAGE_VERSION = 0.2.0
PATH_SEPARATOR = :
RANLIB = ranlib
ROBOTWORLD_CFLAGS = -pipe -std=gnu11
ROBOTWORLD_CPPFLAGS = 
ROBOTWORLD_CXXFLAGS = -pipe -std=gnu++17
ROBOTWORLD_LDFLAGS = 
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
SOCKET_LIBS = 
STRIP = strip
VERSION = 0.2.0
WX_CFLAGS = -I/usr/local/lib/wx/include/gtk2-unicode-3.1 -I/usr/local/include/wx-3.1 -D_FILE_OFFSET_BITS=64 -DWXUSINGDLL -D__WXGTK__ -pthread
WX_CFLAGS_ONLY = -pthread
WX_CONFIG_PATH = /usr/local/bin/wx-config
WX_CPPFLAGS = -I/usr/local/lib/wx/include/gtk2-unicode-3.1 -I/usr/local/include/wx-3.1 -D_FILE_OFFSET_BITS=64 -DWXUSINGDLL -D__WXGTK__
WX_CXXFLAGS = -I/usr/local/lib/wx/include/gtk2-unicode-3.1 -I/usr/local/include/wx-3.1 -D_FILE_OFFSET_BITS=64 -DWXUSINGDLL -D__WXGTK__ -pthread
WX_CXXFLAGS_ONLY = 
WX_LDFLAGS = 
WX_LIBS = -L/usr/local/lib -pthread   -lwx_gtk2u_xrc-3.1 -lwx_gtk2u_html-3.1 -lwx_gtk2u_qa-3.1 -lwx_gtk2u_core-3.1 -lwx_baseu_xml-3.1 -lwx_baseu_net-3.1 -lwx_baseu-3.1 
WX_LIBS_STATIC = 
WX_RESCOMP = 
WX_VERSION = 3.1.3
WX_VERSION_MAJOR = 3
WX_VERSION_MICRO = 3
WX_VERSION_MINOR = 1
abs_builddir = /home/hemmy/Downloads/robotworld_20200922/build/src
abs_srcdir = /home/hemmy/Downloads/robotworld_20200922/build/.././src
abs_top_builddir = /home/hemmy/Downloads/robotworld_20200922/build
abs_top_srcdir = /home/hemmy/Downloads/robotworld_20200922/build/../.
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-pc-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = pc
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-pc-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/hemmy/Downloads/robotworld_20200922/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
runstatedir = ${localstatedir}/run
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = ../.././src
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../
top_builddir = ..
top_srcdir = ../../.
robotworld_SOURCES = AbstractActuator.cpp	\
						AbstractAgent.cpp	\
						AbstractSensor.cpp	\
						AStar.cpp	\
						BoundedVector.cpp	\
						CommunicationService.cpp	\
						DebugTraceFunction.cpp	\
						Goal.cpp	\
						GoalShape.cpp	\
						LaserDistanceSensor.cpp	\
						LineShape.cpp	\
						Logger.cpp	\
						LogTextCtrl.cpp	\
						Main.cpp	\
						MainApplication.cpp	\
						MainFrameWindow.cpp	\
						MathUtils.cpp	\
						ModelObject.cpp	\
						NotificationHandler.cpp	\
						Notifier.cpp	\
						ObjectId.cpp	\
						Observer.cpp	\
						RectangleShape.cpp	\
						Robot.cpp	\
						RobotShape.cpp	\
						RobotWorld.cpp	\
						RobotWorldCanvas.cpp	\
						Shape2DUtils.cpp	\
						StdOutDebugTraceFunction.cpp	\
						SteeringActuator.cpp	\
						ViewObject.cpp	\
						Wall.cpp	\
						WallShape.cpp	\
						WayPoint.cpp	\
						WayPointShape.cpp	\
						WidgetDebugTraceFunction.cpp	\
						Widgets.cpp

robotworld_CPPFLAGS = $(AM_CPPFLAGS) $(ROBOTWORLD_CPPFLAGS) $(WX_CPPFLAGS)
robotworld_CFLAGS = $(AM_CFLAGS)   $(ROBOTWORLD_CFLAGS)	  $(WX_CFLAGS)
robotworld_CXXFLAGS = $(AM_CXXFLAGS) $(ROBOTWORLD_CXXFLAGS) $(BOOST_CPPFLAGS) $(WX_CXXFLAGS)
robotworld_LDFLAGS = $(AM_LDFLAGS)  $(ROBOTWORLD_LDFLAGS)  $(BOOST_LDFLAGS) $(WX_LDFLAGS)
robotworld_LDADD = $(AM_LIBADD)   $(WX_LIBS)   $(BOOST_LIBS) $(SOCKET_LIBS)
all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign src/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign src/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

config.h: stamp-h1
	@test -f $@ || rm -f stamp-h1
	@test -f $@ || $(MAKE) $(AM_MAKEFLAGS) stamp-h1

stamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h1
	cd $(top_builddir) && $(SHELL) ./config.status src/config.h
$(srcdir)/config.h.in:  $(am__configure_deps) 
	($(am__cd) $(top_srcdir) && $(AUTOHEADER))
	rm -f stamp-h1
	touch $@

distclean-hdr:
	-rm -f config.h stamp-h1
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(bindir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(bindir)" || exit 1; \
	fi; \
	for p in $$list; do echo "$$p $$p"; done | \
	sed 's/$(EXEEXT)$$//' | \
	while read p p1; do if test -f $$p \
	 || test -f $$p1 \
	  ; then echo "$$p"; echo "$$p"; else :; fi; \
	done | \
	sed -e 'p;s,.*/,,;n;h' \
	    -e 's|.*|.|' \
	    -e 'p;x;s,.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/' | \
	sed 'N;N;N;s,\n, ,g' | \
	$(AWK) 'BEGIN { files["."] = ""; dirs["."] = 1 } \
	  { d=$$3; if (dirs[d] != 1) { print "d", d; dirs[d] = 1 } \
	    if ($$2 == $$4) files[d] = files[d] " " $$1; \
	    else { print "f", $$3 "/" $$4, $$1; } } \
	  END { for (d in files) print "f", d, files[d] }' | \
	while read type dir files; do \
	    if test "$$dir" = .; then dir=; else dir=/$$dir; fi; \
	    test -z "$$files" || { \
	    echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files '$(DESTDIR)$(bindir)$$dir'"; \
	    $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL_PROGRAM) $$files "$(DESTDIR)$(bindir)$$dir" || exit $$?; \
	    } \
	; done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; test -n "$(bindir)" || list=; \
	files=`for p in $$list; do echo "$$p"; done | \
	  sed -e 'h;s,^.*/,,;s/$(EXEEXT)$$//;$(transform)' \
	      -e 's/$$/$(EXEEXT)/' \
	`; \
	test -n "$$list" || exit 0; \
	echo " ( cd '$(DESTDIR)$(bindir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(bindir)" && rm -f $$files

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

robotworld$(EXEEXT): $(robotworld_OBJECTS) $(robotworld_DEPENDENCIES) $(EXTRA_robotworld_DEPENDENCIES) 
	@rm -f robotworld$(EXEEXT)
	$(AM_V_CXXLD)$(robotworld_LINK) $(robotworld_OBJECTS) $(robotworld_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/robotworld-AStar.Po
include ./$(DEPDIR)/robotworld-AbstractActuator.Po
include ./$(DEPDIR)/robotworld-AbstractAgent.Po
include ./$(DEPDIR)/robotworld-AbstractSensor.Po
include ./$(DEPDIR)/robotworld-BoundedVector.Po
include ./$(DEPDIR)/robotworld-CommunicationService.Po
include ./$(DEPDIR)/robotworld-DebugTraceFunction.Po
include ./$(DEPDIR)/robotworld-Goal.Po
include ./$(DEPDIR)/robotworld-GoalShape.Po
include ./$(DEPDIR)/robotworld-LaserDistanceSensor.Po
include ./$(DEPDIR)/robotworld-LineShape.Po
include ./$(DEPDIR)/robotworld-LogTextCtrl.Po
include ./$(DEPDIR)/robotworld-Logger.Po
include ./$(DEPDIR)/robotworld-Main.Po
include ./$(DEPDIR)/robotworld-MainApplication.Po
include ./$(DEPDIR)/robotworld-MainFrameWindow.Po
include ./$(DEPDIR)/robotworld-MathUtils.Po
include ./$(DEPDIR)/robotworld-ModelObject.Po
include ./$(DEPDIR)/robotworld-NotificationHandler.Po
include ./$(DEPDIR)/robotworld-Notifier.Po
include ./$(DEPDIR)/robotworld-ObjectId.Po
include ./$(DEPDIR)/robotworld-Observer.Po
include ./$(DEPDIR)/robotworld-RectangleShape.Po
include ./$(DEPDIR)/robotworld-Robot.Po
include ./$(DEPDIR)/robotworld-RobotShape.Po
include ./$(DEPDIR)/robotworld-RobotWorld.Po
include ./$(DEPDIR)/robotworld-RobotWorldCanvas.Po
include ./$(DEPDIR)/robotworld-Shape2DUtils.Po
include ./$(DEPDIR)/robotworld-StdOutDebugTraceFunction.Po
include ./$(DEPDIR)/robotworld-SteeringActuator.Po
include ./$(DEPDIR)/robotworld-ViewObject.Po
include ./$(DEPDIR)/robotworld-Wall.Po
include ./$(DEPDIR)/robotworld-WallShape.Po
include ./$(DEPDIR)/robotworld-WayPoint.Po
include ./$(DEPDIR)/robotworld-WayPointShape.Po
include ./$(DEPDIR)/robotworld-WidgetDebugTraceFunction.Po
include ./$(DEPDIR)/robotworld-Widgets.Po

.cpp.o:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.o$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.obj$$||'`;\
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ `$(CYGPATH_W) '$<'` &&\
	$(am__mv) $$depbase.Tpo $$depbase.Po
#	$(AM_V_CXX)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(AM_V_CXX)depbase=`echo $@ | sed 's|[^/]*$$|$(DEPDIR)/&|;s|\.lo$$||'`;\
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $$depbase.Tpo -c -o $@ $< &&\
	$(am__mv) $$depbase.Tpo $$depbase.Plo
#	$(AM_V_CXX)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(LTCXXCOMPILE) -c -o $@ $<

robotworld-AbstractActuator.o: AbstractActuator.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-AbstractActuator.o -MD -MP -MF $(DEPDIR)/robotworld-AbstractActuator.Tpo -c -o robotworld-AbstractActuator.o `test -f 'AbstractActuator.cpp' || echo '$(srcdir)/'`AbstractActuator.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-AbstractActuator.Tpo $(DEPDIR)/robotworld-AbstractActuator.Po
#	$(AM_V_CXX)source='AbstractActuator.cpp' object='robotworld-AbstractActuator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-AbstractActuator.o `test -f 'AbstractActuator.cpp' || echo '$(srcdir)/'`AbstractActuator.cpp

robotworld-AbstractActuator.obj: AbstractActuator.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-AbstractActuator.obj -MD -MP -MF $(DEPDIR)/robotworld-AbstractActuator.Tpo -c -o robotworld-AbstractActuator.obj `if test -f 'AbstractActuator.cpp'; then $(CYGPATH_W) 'AbstractActuator.cpp'; else $(CYGPATH_W) '$(srcdir)/AbstractActuator.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-AbstractActuator.Tpo $(DEPDIR)/robotworld-AbstractActuator.Po
#	$(AM_V_CXX)source='AbstractActuator.cpp' object='robotworld-AbstractActuator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-AbstractActuator.obj `if test -f 'AbstractActuator.cpp'; then $(CYGPATH_W) 'AbstractActuator.cpp'; else $(CYGPATH_W) '$(srcdir)/AbstractActuator.cpp'; fi`

robotworld-AbstractAgent.o: AbstractAgent.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-AbstractAgent.o -MD -MP -MF $(DEPDIR)/robotworld-AbstractAgent.Tpo -c -o robotworld-AbstractAgent.o `test -f 'AbstractAgent.cpp' || echo '$(srcdir)/'`AbstractAgent.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-AbstractAgent.Tpo $(DEPDIR)/robotworld-AbstractAgent.Po
#	$(AM_V_CXX)source='AbstractAgent.cpp' object='robotworld-AbstractAgent.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-AbstractAgent.o `test -f 'AbstractAgent.cpp' || echo '$(srcdir)/'`AbstractAgent.cpp

robotworld-AbstractAgent.obj: AbstractAgent.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-AbstractAgent.obj -MD -MP -MF $(DEPDIR)/robotworld-AbstractAgent.Tpo -c -o robotworld-AbstractAgent.obj `if test -f 'AbstractAgent.cpp'; then $(CYGPATH_W) 'AbstractAgent.cpp'; else $(CYGPATH_W) '$(srcdir)/AbstractAgent.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-AbstractAgent.Tpo $(DEPDIR)/robotworld-AbstractAgent.Po
#	$(AM_V_CXX)source='AbstractAgent.cpp' object='robotworld-AbstractAgent.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-AbstractAgent.obj `if test -f 'AbstractAgent.cpp'; then $(CYGPATH_W) 'AbstractAgent.cpp'; else $(CYGPATH_W) '$(srcdir)/AbstractAgent.cpp'; fi`

robotworld-AbstractSensor.o: AbstractSensor.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-AbstractSensor.o -MD -MP -MF $(DEPDIR)/robotworld-AbstractSensor.Tpo -c -o robotworld-AbstractSensor.o `test -f 'AbstractSensor.cpp' || echo '$(srcdir)/'`AbstractSensor.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-AbstractSensor.Tpo $(DEPDIR)/robotworld-AbstractSensor.Po
#	$(AM_V_CXX)source='AbstractSensor.cpp' object='robotworld-AbstractSensor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-AbstractSensor.o `test -f 'AbstractSensor.cpp' || echo '$(srcdir)/'`AbstractSensor.cpp

robotworld-AbstractSensor.obj: AbstractSensor.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-AbstractSensor.obj -MD -MP -MF $(DEPDIR)/robotworld-AbstractSensor.Tpo -c -o robotworld-AbstractSensor.obj `if test -f 'AbstractSensor.cpp'; then $(CYGPATH_W) 'AbstractSensor.cpp'; else $(CYGPATH_W) '$(srcdir)/AbstractSensor.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-AbstractSensor.Tpo $(DEPDIR)/robotworld-AbstractSensor.Po
#	$(AM_V_CXX)source='AbstractSensor.cpp' object='robotworld-AbstractSensor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-AbstractSensor.obj `if test -f 'AbstractSensor.cpp'; then $(CYGPATH_W) 'AbstractSensor.cpp'; else $(CYGPATH_W) '$(srcdir)/AbstractSensor.cpp'; fi`

robotworld-AStar.o: AStar.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-AStar.o -MD -MP -MF $(DEPDIR)/robotworld-AStar.Tpo -c -o robotworld-AStar.o `test -f 'AStar.cpp' || echo '$(srcdir)/'`AStar.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-AStar.Tpo $(DEPDIR)/robotworld-AStar.Po
#	$(AM_V_CXX)source='AStar.cpp' object='robotworld-AStar.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-AStar.o `test -f 'AStar.cpp' || echo '$(srcdir)/'`AStar.cpp

robotworld-AStar.obj: AStar.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-AStar.obj -MD -MP -MF $(DEPDIR)/robotworld-AStar.Tpo -c -o robotworld-AStar.obj `if test -f 'AStar.cpp'; then $(CYGPATH_W) 'AStar.cpp'; else $(CYGPATH_W) '$(srcdir)/AStar.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-AStar.Tpo $(DEPDIR)/robotworld-AStar.Po
#	$(AM_V_CXX)source='AStar.cpp' object='robotworld-AStar.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-AStar.obj `if test -f 'AStar.cpp'; then $(CYGPATH_W) 'AStar.cpp'; else $(CYGPATH_W) '$(srcdir)/AStar.cpp'; fi`

robotworld-BoundedVector.o: BoundedVector.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-BoundedVector.o -MD -MP -MF $(DEPDIR)/robotworld-BoundedVector.Tpo -c -o robotworld-BoundedVector.o `test -f 'BoundedVector.cpp' || echo '$(srcdir)/'`BoundedVector.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-BoundedVector.Tpo $(DEPDIR)/robotworld-BoundedVector.Po
#	$(AM_V_CXX)source='BoundedVector.cpp' object='robotworld-BoundedVector.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-BoundedVector.o `test -f 'BoundedVector.cpp' || echo '$(srcdir)/'`BoundedVector.cpp

robotworld-BoundedVector.obj: BoundedVector.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-BoundedVector.obj -MD -MP -MF $(DEPDIR)/robotworld-BoundedVector.Tpo -c -o robotworld-BoundedVector.obj `if test -f 'BoundedVector.cpp'; then $(CYGPATH_W) 'BoundedVector.cpp'; else $(CYGPATH_W) '$(srcdir)/BoundedVector.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-BoundedVector.Tpo $(DEPDIR)/robotworld-BoundedVector.Po
#	$(AM_V_CXX)source='BoundedVector.cpp' object='robotworld-BoundedVector.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-BoundedVector.obj `if test -f 'BoundedVector.cpp'; then $(CYGPATH_W) 'BoundedVector.cpp'; else $(CYGPATH_W) '$(srcdir)/BoundedVector.cpp'; fi`

robotworld-CommunicationService.o: CommunicationService.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-CommunicationService.o -MD -MP -MF $(DEPDIR)/robotworld-CommunicationService.Tpo -c -o robotworld-CommunicationService.o `test -f 'CommunicationService.cpp' || echo '$(srcdir)/'`CommunicationService.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-CommunicationService.Tpo $(DEPDIR)/robotworld-CommunicationService.Po
#	$(AM_V_CXX)source='CommunicationService.cpp' object='robotworld-CommunicationService.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-CommunicationService.o `test -f 'CommunicationService.cpp' || echo '$(srcdir)/'`CommunicationService.cpp

robotworld-CommunicationService.obj: CommunicationService.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-CommunicationService.obj -MD -MP -MF $(DEPDIR)/robotworld-CommunicationService.Tpo -c -o robotworld-CommunicationService.obj `if test -f 'CommunicationService.cpp'; then $(CYGPATH_W) 'CommunicationService.cpp'; else $(CYGPATH_W) '$(srcdir)/CommunicationService.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-CommunicationService.Tpo $(DEPDIR)/robotworld-CommunicationService.Po
#	$(AM_V_CXX)source='CommunicationService.cpp' object='robotworld-CommunicationService.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-CommunicationService.obj `if test -f 'CommunicationService.cpp'; then $(CYGPATH_W) 'CommunicationService.cpp'; else $(CYGPATH_W) '$(srcdir)/CommunicationService.cpp'; fi`

robotworld-DebugTraceFunction.o: DebugTraceFunction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-DebugTraceFunction.o -MD -MP -MF $(DEPDIR)/robotworld-DebugTraceFunction.Tpo -c -o robotworld-DebugTraceFunction.o `test -f 'DebugTraceFunction.cpp' || echo '$(srcdir)/'`DebugTraceFunction.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-DebugTraceFunction.Tpo $(DEPDIR)/robotworld-DebugTraceFunction.Po
#	$(AM_V_CXX)source='DebugTraceFunction.cpp' object='robotworld-DebugTraceFunction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-DebugTraceFunction.o `test -f 'DebugTraceFunction.cpp' || echo '$(srcdir)/'`DebugTraceFunction.cpp

robotworld-DebugTraceFunction.obj: DebugTraceFunction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-DebugTraceFunction.obj -MD -MP -MF $(DEPDIR)/robotworld-DebugTraceFunction.Tpo -c -o robotworld-DebugTraceFunction.obj `if test -f 'DebugTraceFunction.cpp'; then $(CYGPATH_W) 'DebugTraceFunction.cpp'; else $(CYGPATH_W) '$(srcdir)/DebugTraceFunction.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-DebugTraceFunction.Tpo $(DEPDIR)/robotworld-DebugTraceFunction.Po
#	$(AM_V_CXX)source='DebugTraceFunction.cpp' object='robotworld-DebugTraceFunction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-DebugTraceFunction.obj `if test -f 'DebugTraceFunction.cpp'; then $(CYGPATH_W) 'DebugTraceFunction.cpp'; else $(CYGPATH_W) '$(srcdir)/DebugTraceFunction.cpp'; fi`

robotworld-Goal.o: Goal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Goal.o -MD -MP -MF $(DEPDIR)/robotworld-Goal.Tpo -c -o robotworld-Goal.o `test -f 'Goal.cpp' || echo '$(srcdir)/'`Goal.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Goal.Tpo $(DEPDIR)/robotworld-Goal.Po
#	$(AM_V_CXX)source='Goal.cpp' object='robotworld-Goal.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Goal.o `test -f 'Goal.cpp' || echo '$(srcdir)/'`Goal.cpp

robotworld-Goal.obj: Goal.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Goal.obj -MD -MP -MF $(DEPDIR)/robotworld-Goal.Tpo -c -o robotworld-Goal.obj `if test -f 'Goal.cpp'; then $(CYGPATH_W) 'Goal.cpp'; else $(CYGPATH_W) '$(srcdir)/Goal.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Goal.Tpo $(DEPDIR)/robotworld-Goal.Po
#	$(AM_V_CXX)source='Goal.cpp' object='robotworld-Goal.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Goal.obj `if test -f 'Goal.cpp'; then $(CYGPATH_W) 'Goal.cpp'; else $(CYGPATH_W) '$(srcdir)/Goal.cpp'; fi`

robotworld-GoalShape.o: GoalShape.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-GoalShape.o -MD -MP -MF $(DEPDIR)/robotworld-GoalShape.Tpo -c -o robotworld-GoalShape.o `test -f 'GoalShape.cpp' || echo '$(srcdir)/'`GoalShape.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-GoalShape.Tpo $(DEPDIR)/robotworld-GoalShape.Po
#	$(AM_V_CXX)source='GoalShape.cpp' object='robotworld-GoalShape.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-GoalShape.o `test -f 'GoalShape.cpp' || echo '$(srcdir)/'`GoalShape.cpp

robotworld-GoalShape.obj: GoalShape.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-GoalShape.obj -MD -MP -MF $(DEPDIR)/robotworld-GoalShape.Tpo -c -o robotworld-GoalShape.obj `if test -f 'GoalShape.cpp'; then $(CYGPATH_W) 'GoalShape.cpp'; else $(CYGPATH_W) '$(srcdir)/GoalShape.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-GoalShape.Tpo $(DEPDIR)/robotworld-GoalShape.Po
#	$(AM_V_CXX)source='GoalShape.cpp' object='robotworld-GoalShape.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-GoalShape.obj `if test -f 'GoalShape.cpp'; then $(CYGPATH_W) 'GoalShape.cpp'; else $(CYGPATH_W) '$(srcdir)/GoalShape.cpp'; fi`

robotworld-LaserDistanceSensor.o: LaserDistanceSensor.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-LaserDistanceSensor.o -MD -MP -MF $(DEPDIR)/robotworld-LaserDistanceSensor.Tpo -c -o robotworld-LaserDistanceSensor.o `test -f 'LaserDistanceSensor.cpp' || echo '$(srcdir)/'`LaserDistanceSensor.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-LaserDistanceSensor.Tpo $(DEPDIR)/robotworld-LaserDistanceSensor.Po
#	$(AM_V_CXX)source='LaserDistanceSensor.cpp' object='robotworld-LaserDistanceSensor.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-LaserDistanceSensor.o `test -f 'LaserDistanceSensor.cpp' || echo '$(srcdir)/'`LaserDistanceSensor.cpp

robotworld-LaserDistanceSensor.obj: LaserDistanceSensor.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-LaserDistanceSensor.obj -MD -MP -MF $(DEPDIR)/robotworld-LaserDistanceSensor.Tpo -c -o robotworld-LaserDistanceSensor.obj `if test -f 'LaserDistanceSensor.cpp'; then $(CYGPATH_W) 'LaserDistanceSensor.cpp'; else $(CYGPATH_W) '$(srcdir)/LaserDistanceSensor.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-LaserDistanceSensor.Tpo $(DEPDIR)/robotworld-LaserDistanceSensor.Po
#	$(AM_V_CXX)source='LaserDistanceSensor.cpp' object='robotworld-LaserDistanceSensor.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-LaserDistanceSensor.obj `if test -f 'LaserDistanceSensor.cpp'; then $(CYGPATH_W) 'LaserDistanceSensor.cpp'; else $(CYGPATH_W) '$(srcdir)/LaserDistanceSensor.cpp'; fi`

robotworld-LineShape.o: LineShape.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-LineShape.o -MD -MP -MF $(DEPDIR)/robotworld-LineShape.Tpo -c -o robotworld-LineShape.o `test -f 'LineShape.cpp' || echo '$(srcdir)/'`LineShape.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-LineShape.Tpo $(DEPDIR)/robotworld-LineShape.Po
#	$(AM_V_CXX)source='LineShape.cpp' object='robotworld-LineShape.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-LineShape.o `test -f 'LineShape.cpp' || echo '$(srcdir)/'`LineShape.cpp

robotworld-LineShape.obj: LineShape.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-LineShape.obj -MD -MP -MF $(DEPDIR)/robotworld-LineShape.Tpo -c -o robotworld-LineShape.obj `if test -f 'LineShape.cpp'; then $(CYGPATH_W) 'LineShape.cpp'; else $(CYGPATH_W) '$(srcdir)/LineShape.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-LineShape.Tpo $(DEPDIR)/robotworld-LineShape.Po
#	$(AM_V_CXX)source='LineShape.cpp' object='robotworld-LineShape.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-LineShape.obj `if test -f 'LineShape.cpp'; then $(CYGPATH_W) 'LineShape.cpp'; else $(CYGPATH_W) '$(srcdir)/LineShape.cpp'; fi`

robotworld-Logger.o: Logger.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Logger.o -MD -MP -MF $(DEPDIR)/robotworld-Logger.Tpo -c -o robotworld-Logger.o `test -f 'Logger.cpp' || echo '$(srcdir)/'`Logger.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Logger.Tpo $(DEPDIR)/robotworld-Logger.Po
#	$(AM_V_CXX)source='Logger.cpp' object='robotworld-Logger.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Logger.o `test -f 'Logger.cpp' || echo '$(srcdir)/'`Logger.cpp

robotworld-Logger.obj: Logger.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Logger.obj -MD -MP -MF $(DEPDIR)/robotworld-Logger.Tpo -c -o robotworld-Logger.obj `if test -f 'Logger.cpp'; then $(CYGPATH_W) 'Logger.cpp'; else $(CYGPATH_W) '$(srcdir)/Logger.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Logger.Tpo $(DEPDIR)/robotworld-Logger.Po
#	$(AM_V_CXX)source='Logger.cpp' object='robotworld-Logger.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Logger.obj `if test -f 'Logger.cpp'; then $(CYGPATH_W) 'Logger.cpp'; else $(CYGPATH_W) '$(srcdir)/Logger.cpp'; fi`

robotworld-LogTextCtrl.o: LogTextCtrl.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-LogTextCtrl.o -MD -MP -MF $(DEPDIR)/robotworld-LogTextCtrl.Tpo -c -o robotworld-LogTextCtrl.o `test -f 'LogTextCtrl.cpp' || echo '$(srcdir)/'`LogTextCtrl.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-LogTextCtrl.Tpo $(DEPDIR)/robotworld-LogTextCtrl.Po
#	$(AM_V_CXX)source='LogTextCtrl.cpp' object='robotworld-LogTextCtrl.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-LogTextCtrl.o `test -f 'LogTextCtrl.cpp' || echo '$(srcdir)/'`LogTextCtrl.cpp

robotworld-LogTextCtrl.obj: LogTextCtrl.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-LogTextCtrl.obj -MD -MP -MF $(DEPDIR)/robotworld-LogTextCtrl.Tpo -c -o robotworld-LogTextCtrl.obj `if test -f 'LogTextCtrl.cpp'; then $(CYGPATH_W) 'LogTextCtrl.cpp'; else $(CYGPATH_W) '$(srcdir)/LogTextCtrl.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-LogTextCtrl.Tpo $(DEPDIR)/robotworld-LogTextCtrl.Po
#	$(AM_V_CXX)source='LogTextCtrl.cpp' object='robotworld-LogTextCtrl.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-LogTextCtrl.obj `if test -f 'LogTextCtrl.cpp'; then $(CYGPATH_W) 'LogTextCtrl.cpp'; else $(CYGPATH_W) '$(srcdir)/LogTextCtrl.cpp'; fi`

robotworld-Main.o: Main.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Main.o -MD -MP -MF $(DEPDIR)/robotworld-Main.Tpo -c -o robotworld-Main.o `test -f 'Main.cpp' || echo '$(srcdir)/'`Main.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Main.Tpo $(DEPDIR)/robotworld-Main.Po
#	$(AM_V_CXX)source='Main.cpp' object='robotworld-Main.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Main.o `test -f 'Main.cpp' || echo '$(srcdir)/'`Main.cpp

robotworld-Main.obj: Main.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Main.obj -MD -MP -MF $(DEPDIR)/robotworld-Main.Tpo -c -o robotworld-Main.obj `if test -f 'Main.cpp'; then $(CYGPATH_W) 'Main.cpp'; else $(CYGPATH_W) '$(srcdir)/Main.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Main.Tpo $(DEPDIR)/robotworld-Main.Po
#	$(AM_V_CXX)source='Main.cpp' object='robotworld-Main.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Main.obj `if test -f 'Main.cpp'; then $(CYGPATH_W) 'Main.cpp'; else $(CYGPATH_W) '$(srcdir)/Main.cpp'; fi`

robotworld-MainApplication.o: MainApplication.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-MainApplication.o -MD -MP -MF $(DEPDIR)/robotworld-MainApplication.Tpo -c -o robotworld-MainApplication.o `test -f 'MainApplication.cpp' || echo '$(srcdir)/'`MainApplication.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-MainApplication.Tpo $(DEPDIR)/robotworld-MainApplication.Po
#	$(AM_V_CXX)source='MainApplication.cpp' object='robotworld-MainApplication.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-MainApplication.o `test -f 'MainApplication.cpp' || echo '$(srcdir)/'`MainApplication.cpp

robotworld-MainApplication.obj: MainApplication.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-MainApplication.obj -MD -MP -MF $(DEPDIR)/robotworld-MainApplication.Tpo -c -o robotworld-MainApplication.obj `if test -f 'MainApplication.cpp'; then $(CYGPATH_W) 'MainApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/MainApplication.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-MainApplication.Tpo $(DEPDIR)/robotworld-MainApplication.Po
#	$(AM_V_CXX)source='MainApplication.cpp' object='robotworld-MainApplication.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-MainApplication.obj `if test -f 'MainApplication.cpp'; then $(CYGPATH_W) 'MainApplication.cpp'; else $(CYGPATH_W) '$(srcdir)/MainApplication.cpp'; fi`

robotworld-MainFrameWindow.o: MainFrameWindow.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-MainFrameWindow.o -MD -MP -MF $(DEPDIR)/robotworld-MainFrameWindow.Tpo -c -o robotworld-MainFrameWindow.o `test -f 'MainFrameWindow.cpp' || echo '$(srcdir)/'`MainFrameWindow.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-MainFrameWindow.Tpo $(DEPDIR)/robotworld-MainFrameWindow.Po
#	$(AM_V_CXX)source='MainFrameWindow.cpp' object='robotworld-MainFrameWindow.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-MainFrameWindow.o `test -f 'MainFrameWindow.cpp' || echo '$(srcdir)/'`MainFrameWindow.cpp

robotworld-MainFrameWindow.obj: MainFrameWindow.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-MainFrameWindow.obj -MD -MP -MF $(DEPDIR)/robotworld-MainFrameWindow.Tpo -c -o robotworld-MainFrameWindow.obj `if test -f 'MainFrameWindow.cpp'; then $(CYGPATH_W) 'MainFrameWindow.cpp'; else $(CYGPATH_W) '$(srcdir)/MainFrameWindow.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-MainFrameWindow.Tpo $(DEPDIR)/robotworld-MainFrameWindow.Po
#	$(AM_V_CXX)source='MainFrameWindow.cpp' object='robotworld-MainFrameWindow.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-MainFrameWindow.obj `if test -f 'MainFrameWindow.cpp'; then $(CYGPATH_W) 'MainFrameWindow.cpp'; else $(CYGPATH_W) '$(srcdir)/MainFrameWindow.cpp'; fi`

robotworld-MathUtils.o: MathUtils.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-MathUtils.o -MD -MP -MF $(DEPDIR)/robotworld-MathUtils.Tpo -c -o robotworld-MathUtils.o `test -f 'MathUtils.cpp' || echo '$(srcdir)/'`MathUtils.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-MathUtils.Tpo $(DEPDIR)/robotworld-MathUtils.Po
#	$(AM_V_CXX)source='MathUtils.cpp' object='robotworld-MathUtils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-MathUtils.o `test -f 'MathUtils.cpp' || echo '$(srcdir)/'`MathUtils.cpp

robotworld-MathUtils.obj: MathUtils.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-MathUtils.obj -MD -MP -MF $(DEPDIR)/robotworld-MathUtils.Tpo -c -o robotworld-MathUtils.obj `if test -f 'MathUtils.cpp'; then $(CYGPATH_W) 'MathUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/MathUtils.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-MathUtils.Tpo $(DEPDIR)/robotworld-MathUtils.Po
#	$(AM_V_CXX)source='MathUtils.cpp' object='robotworld-MathUtils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-MathUtils.obj `if test -f 'MathUtils.cpp'; then $(CYGPATH_W) 'MathUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/MathUtils.cpp'; fi`

robotworld-ModelObject.o: ModelObject.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-ModelObject.o -MD -MP -MF $(DEPDIR)/robotworld-ModelObject.Tpo -c -o robotworld-ModelObject.o `test -f 'ModelObject.cpp' || echo '$(srcdir)/'`ModelObject.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-ModelObject.Tpo $(DEPDIR)/robotworld-ModelObject.Po
#	$(AM_V_CXX)source='ModelObject.cpp' object='robotworld-ModelObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-ModelObject.o `test -f 'ModelObject.cpp' || echo '$(srcdir)/'`ModelObject.cpp

robotworld-ModelObject.obj: ModelObject.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-ModelObject.obj -MD -MP -MF $(DEPDIR)/robotworld-ModelObject.Tpo -c -o robotworld-ModelObject.obj `if test -f 'ModelObject.cpp'; then $(CYGPATH_W) 'ModelObject.cpp'; else $(CYGPATH_W) '$(srcdir)/ModelObject.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-ModelObject.Tpo $(DEPDIR)/robotworld-ModelObject.Po
#	$(AM_V_CXX)source='ModelObject.cpp' object='robotworld-ModelObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-ModelObject.obj `if test -f 'ModelObject.cpp'; then $(CYGPATH_W) 'ModelObject.cpp'; else $(CYGPATH_W) '$(srcdir)/ModelObject.cpp'; fi`

robotworld-NotificationHandler.o: NotificationHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-NotificationHandler.o -MD -MP -MF $(DEPDIR)/robotworld-NotificationHandler.Tpo -c -o robotworld-NotificationHandler.o `test -f 'NotificationHandler.cpp' || echo '$(srcdir)/'`NotificationHandler.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-NotificationHandler.Tpo $(DEPDIR)/robotworld-NotificationHandler.Po
#	$(AM_V_CXX)source='NotificationHandler.cpp' object='robotworld-NotificationHandler.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-NotificationHandler.o `test -f 'NotificationHandler.cpp' || echo '$(srcdir)/'`NotificationHandler.cpp

robotworld-NotificationHandler.obj: NotificationHandler.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-NotificationHandler.obj -MD -MP -MF $(DEPDIR)/robotworld-NotificationHandler.Tpo -c -o robotworld-NotificationHandler.obj `if test -f 'NotificationHandler.cpp'; then $(CYGPATH_W) 'NotificationHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/NotificationHandler.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-NotificationHandler.Tpo $(DEPDIR)/robotworld-NotificationHandler.Po
#	$(AM_V_CXX)source='NotificationHandler.cpp' object='robotworld-NotificationHandler.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-NotificationHandler.obj `if test -f 'NotificationHandler.cpp'; then $(CYGPATH_W) 'NotificationHandler.cpp'; else $(CYGPATH_W) '$(srcdir)/NotificationHandler.cpp'; fi`

robotworld-Notifier.o: Notifier.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Notifier.o -MD -MP -MF $(DEPDIR)/robotworld-Notifier.Tpo -c -o robotworld-Notifier.o `test -f 'Notifier.cpp' || echo '$(srcdir)/'`Notifier.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Notifier.Tpo $(DEPDIR)/robotworld-Notifier.Po
#	$(AM_V_CXX)source='Notifier.cpp' object='robotworld-Notifier.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Notifier.o `test -f 'Notifier.cpp' || echo '$(srcdir)/'`Notifier.cpp

robotworld-Notifier.obj: Notifier.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Notifier.obj -MD -MP -MF $(DEPDIR)/robotworld-Notifier.Tpo -c -o robotworld-Notifier.obj `if test -f 'Notifier.cpp'; then $(CYGPATH_W) 'Notifier.cpp'; else $(CYGPATH_W) '$(srcdir)/Notifier.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Notifier.Tpo $(DEPDIR)/robotworld-Notifier.Po
#	$(AM_V_CXX)source='Notifier.cpp' object='robotworld-Notifier.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Notifier.obj `if test -f 'Notifier.cpp'; then $(CYGPATH_W) 'Notifier.cpp'; else $(CYGPATH_W) '$(srcdir)/Notifier.cpp'; fi`

robotworld-ObjectId.o: ObjectId.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-ObjectId.o -MD -MP -MF $(DEPDIR)/robotworld-ObjectId.Tpo -c -o robotworld-ObjectId.o `test -f 'ObjectId.cpp' || echo '$(srcdir)/'`ObjectId.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-ObjectId.Tpo $(DEPDIR)/robotworld-ObjectId.Po
#	$(AM_V_CXX)source='ObjectId.cpp' object='robotworld-ObjectId.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-ObjectId.o `test -f 'ObjectId.cpp' || echo '$(srcdir)/'`ObjectId.cpp

robotworld-ObjectId.obj: ObjectId.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-ObjectId.obj -MD -MP -MF $(DEPDIR)/robotworld-ObjectId.Tpo -c -o robotworld-ObjectId.obj `if test -f 'ObjectId.cpp'; then $(CYGPATH_W) 'ObjectId.cpp'; else $(CYGPATH_W) '$(srcdir)/ObjectId.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-ObjectId.Tpo $(DEPDIR)/robotworld-ObjectId.Po
#	$(AM_V_CXX)source='ObjectId.cpp' object='robotworld-ObjectId.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-ObjectId.obj `if test -f 'ObjectId.cpp'; then $(CYGPATH_W) 'ObjectId.cpp'; else $(CYGPATH_W) '$(srcdir)/ObjectId.cpp'; fi`

robotworld-Observer.o: Observer.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Observer.o -MD -MP -MF $(DEPDIR)/robotworld-Observer.Tpo -c -o robotworld-Observer.o `test -f 'Observer.cpp' || echo '$(srcdir)/'`Observer.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Observer.Tpo $(DEPDIR)/robotworld-Observer.Po
#	$(AM_V_CXX)source='Observer.cpp' object='robotworld-Observer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Observer.o `test -f 'Observer.cpp' || echo '$(srcdir)/'`Observer.cpp

robotworld-Observer.obj: Observer.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Observer.obj -MD -MP -MF $(DEPDIR)/robotworld-Observer.Tpo -c -o robotworld-Observer.obj `if test -f 'Observer.cpp'; then $(CYGPATH_W) 'Observer.cpp'; else $(CYGPATH_W) '$(srcdir)/Observer.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Observer.Tpo $(DEPDIR)/robotworld-Observer.Po
#	$(AM_V_CXX)source='Observer.cpp' object='robotworld-Observer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Observer.obj `if test -f 'Observer.cpp'; then $(CYGPATH_W) 'Observer.cpp'; else $(CYGPATH_W) '$(srcdir)/Observer.cpp'; fi`

robotworld-RectangleShape.o: RectangleShape.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-RectangleShape.o -MD -MP -MF $(DEPDIR)/robotworld-RectangleShape.Tpo -c -o robotworld-RectangleShape.o `test -f 'RectangleShape.cpp' || echo '$(srcdir)/'`RectangleShape.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-RectangleShape.Tpo $(DEPDIR)/robotworld-RectangleShape.Po
#	$(AM_V_CXX)source='RectangleShape.cpp' object='robotworld-RectangleShape.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-RectangleShape.o `test -f 'RectangleShape.cpp' || echo '$(srcdir)/'`RectangleShape.cpp

robotworld-RectangleShape.obj: RectangleShape.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-RectangleShape.obj -MD -MP -MF $(DEPDIR)/robotworld-RectangleShape.Tpo -c -o robotworld-RectangleShape.obj `if test -f 'RectangleShape.cpp'; then $(CYGPATH_W) 'RectangleShape.cpp'; else $(CYGPATH_W) '$(srcdir)/RectangleShape.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-RectangleShape.Tpo $(DEPDIR)/robotworld-RectangleShape.Po
#	$(AM_V_CXX)source='RectangleShape.cpp' object='robotworld-RectangleShape.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-RectangleShape.obj `if test -f 'RectangleShape.cpp'; then $(CYGPATH_W) 'RectangleShape.cpp'; else $(CYGPATH_W) '$(srcdir)/RectangleShape.cpp'; fi`

robotworld-Robot.o: Robot.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Robot.o -MD -MP -MF $(DEPDIR)/robotworld-Robot.Tpo -c -o robotworld-Robot.o `test -f 'Robot.cpp' || echo '$(srcdir)/'`Robot.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Robot.Tpo $(DEPDIR)/robotworld-Robot.Po
#	$(AM_V_CXX)source='Robot.cpp' object='robotworld-Robot.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Robot.o `test -f 'Robot.cpp' || echo '$(srcdir)/'`Robot.cpp

robotworld-Robot.obj: Robot.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Robot.obj -MD -MP -MF $(DEPDIR)/robotworld-Robot.Tpo -c -o robotworld-Robot.obj `if test -f 'Robot.cpp'; then $(CYGPATH_W) 'Robot.cpp'; else $(CYGPATH_W) '$(srcdir)/Robot.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Robot.Tpo $(DEPDIR)/robotworld-Robot.Po
#	$(AM_V_CXX)source='Robot.cpp' object='robotworld-Robot.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Robot.obj `if test -f 'Robot.cpp'; then $(CYGPATH_W) 'Robot.cpp'; else $(CYGPATH_W) '$(srcdir)/Robot.cpp'; fi`

robotworld-RobotShape.o: RobotShape.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-RobotShape.o -MD -MP -MF $(DEPDIR)/robotworld-RobotShape.Tpo -c -o robotworld-RobotShape.o `test -f 'RobotShape.cpp' || echo '$(srcdir)/'`RobotShape.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-RobotShape.Tpo $(DEPDIR)/robotworld-RobotShape.Po
#	$(AM_V_CXX)source='RobotShape.cpp' object='robotworld-RobotShape.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-RobotShape.o `test -f 'RobotShape.cpp' || echo '$(srcdir)/'`RobotShape.cpp

robotworld-RobotShape.obj: RobotShape.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-RobotShape.obj -MD -MP -MF $(DEPDIR)/robotworld-RobotShape.Tpo -c -o robotworld-RobotShape.obj `if test -f 'RobotShape.cpp'; then $(CYGPATH_W) 'RobotShape.cpp'; else $(CYGPATH_W) '$(srcdir)/RobotShape.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-RobotShape.Tpo $(DEPDIR)/robotworld-RobotShape.Po
#	$(AM_V_CXX)source='RobotShape.cpp' object='robotworld-RobotShape.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-RobotShape.obj `if test -f 'RobotShape.cpp'; then $(CYGPATH_W) 'RobotShape.cpp'; else $(CYGPATH_W) '$(srcdir)/RobotShape.cpp'; fi`

robotworld-RobotWorld.o: RobotWorld.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-RobotWorld.o -MD -MP -MF $(DEPDIR)/robotworld-RobotWorld.Tpo -c -o robotworld-RobotWorld.o `test -f 'RobotWorld.cpp' || echo '$(srcdir)/'`RobotWorld.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-RobotWorld.Tpo $(DEPDIR)/robotworld-RobotWorld.Po
#	$(AM_V_CXX)source='RobotWorld.cpp' object='robotworld-RobotWorld.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-RobotWorld.o `test -f 'RobotWorld.cpp' || echo '$(srcdir)/'`RobotWorld.cpp

robotworld-RobotWorld.obj: RobotWorld.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-RobotWorld.obj -MD -MP -MF $(DEPDIR)/robotworld-RobotWorld.Tpo -c -o robotworld-RobotWorld.obj `if test -f 'RobotWorld.cpp'; then $(CYGPATH_W) 'RobotWorld.cpp'; else $(CYGPATH_W) '$(srcdir)/RobotWorld.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-RobotWorld.Tpo $(DEPDIR)/robotworld-RobotWorld.Po
#	$(AM_V_CXX)source='RobotWorld.cpp' object='robotworld-RobotWorld.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-RobotWorld.obj `if test -f 'RobotWorld.cpp'; then $(CYGPATH_W) 'RobotWorld.cpp'; else $(CYGPATH_W) '$(srcdir)/RobotWorld.cpp'; fi`

robotworld-RobotWorldCanvas.o: RobotWorldCanvas.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-RobotWorldCanvas.o -MD -MP -MF $(DEPDIR)/robotworld-RobotWorldCanvas.Tpo -c -o robotworld-RobotWorldCanvas.o `test -f 'RobotWorldCanvas.cpp' || echo '$(srcdir)/'`RobotWorldCanvas.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-RobotWorldCanvas.Tpo $(DEPDIR)/robotworld-RobotWorldCanvas.Po
#	$(AM_V_CXX)source='RobotWorldCanvas.cpp' object='robotworld-RobotWorldCanvas.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-RobotWorldCanvas.o `test -f 'RobotWorldCanvas.cpp' || echo '$(srcdir)/'`RobotWorldCanvas.cpp

robotworld-RobotWorldCanvas.obj: RobotWorldCanvas.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-RobotWorldCanvas.obj -MD -MP -MF $(DEPDIR)/robotworld-RobotWorldCanvas.Tpo -c -o robotworld-RobotWorldCanvas.obj `if test -f 'RobotWorldCanvas.cpp'; then $(CYGPATH_W) 'RobotWorldCanvas.cpp'; else $(CYGPATH_W) '$(srcdir)/RobotWorldCanvas.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-RobotWorldCanvas.Tpo $(DEPDIR)/robotworld-RobotWorldCanvas.Po
#	$(AM_V_CXX)source='RobotWorldCanvas.cpp' object='robotworld-RobotWorldCanvas.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-RobotWorldCanvas.obj `if test -f 'RobotWorldCanvas.cpp'; then $(CYGPATH_W) 'RobotWorldCanvas.cpp'; else $(CYGPATH_W) '$(srcdir)/RobotWorldCanvas.cpp'; fi`

robotworld-Shape2DUtils.o: Shape2DUtils.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Shape2DUtils.o -MD -MP -MF $(DEPDIR)/robotworld-Shape2DUtils.Tpo -c -o robotworld-Shape2DUtils.o `test -f 'Shape2DUtils.cpp' || echo '$(srcdir)/'`Shape2DUtils.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Shape2DUtils.Tpo $(DEPDIR)/robotworld-Shape2DUtils.Po
#	$(AM_V_CXX)source='Shape2DUtils.cpp' object='robotworld-Shape2DUtils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Shape2DUtils.o `test -f 'Shape2DUtils.cpp' || echo '$(srcdir)/'`Shape2DUtils.cpp

robotworld-Shape2DUtils.obj: Shape2DUtils.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Shape2DUtils.obj -MD -MP -MF $(DEPDIR)/robotworld-Shape2DUtils.Tpo -c -o robotworld-Shape2DUtils.obj `if test -f 'Shape2DUtils.cpp'; then $(CYGPATH_W) 'Shape2DUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/Shape2DUtils.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Shape2DUtils.Tpo $(DEPDIR)/robotworld-Shape2DUtils.Po
#	$(AM_V_CXX)source='Shape2DUtils.cpp' object='robotworld-Shape2DUtils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Shape2DUtils.obj `if test -f 'Shape2DUtils.cpp'; then $(CYGPATH_W) 'Shape2DUtils.cpp'; else $(CYGPATH_W) '$(srcdir)/Shape2DUtils.cpp'; fi`

robotworld-StdOutDebugTraceFunction.o: StdOutDebugTraceFunction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-StdOutDebugTraceFunction.o -MD -MP -MF $(DEPDIR)/robotworld-StdOutDebugTraceFunction.Tpo -c -o robotworld-StdOutDebugTraceFunction.o `test -f 'StdOutDebugTraceFunction.cpp' || echo '$(srcdir)/'`StdOutDebugTraceFunction.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-StdOutDebugTraceFunction.Tpo $(DEPDIR)/robotworld-StdOutDebugTraceFunction.Po
#	$(AM_V_CXX)source='StdOutDebugTraceFunction.cpp' object='robotworld-StdOutDebugTraceFunction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-StdOutDebugTraceFunction.o `test -f 'StdOutDebugTraceFunction.cpp' || echo '$(srcdir)/'`StdOutDebugTraceFunction.cpp

robotworld-StdOutDebugTraceFunction.obj: StdOutDebugTraceFunction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-StdOutDebugTraceFunction.obj -MD -MP -MF $(DEPDIR)/robotworld-StdOutDebugTraceFunction.Tpo -c -o robotworld-StdOutDebugTraceFunction.obj `if test -f 'StdOutDebugTraceFunction.cpp'; then $(CYGPATH_W) 'StdOutDebugTraceFunction.cpp'; else $(CYGPATH_W) '$(srcdir)/StdOutDebugTraceFunction.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-StdOutDebugTraceFunction.Tpo $(DEPDIR)/robotworld-StdOutDebugTraceFunction.Po
#	$(AM_V_CXX)source='StdOutDebugTraceFunction.cpp' object='robotworld-StdOutDebugTraceFunction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-StdOutDebugTraceFunction.obj `if test -f 'StdOutDebugTraceFunction.cpp'; then $(CYGPATH_W) 'StdOutDebugTraceFunction.cpp'; else $(CYGPATH_W) '$(srcdir)/StdOutDebugTraceFunction.cpp'; fi`

robotworld-SteeringActuator.o: SteeringActuator.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-SteeringActuator.o -MD -MP -MF $(DEPDIR)/robotworld-SteeringActuator.Tpo -c -o robotworld-SteeringActuator.o `test -f 'SteeringActuator.cpp' || echo '$(srcdir)/'`SteeringActuator.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-SteeringActuator.Tpo $(DEPDIR)/robotworld-SteeringActuator.Po
#	$(AM_V_CXX)source='SteeringActuator.cpp' object='robotworld-SteeringActuator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-SteeringActuator.o `test -f 'SteeringActuator.cpp' || echo '$(srcdir)/'`SteeringActuator.cpp

robotworld-SteeringActuator.obj: SteeringActuator.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-SteeringActuator.obj -MD -MP -MF $(DEPDIR)/robotworld-SteeringActuator.Tpo -c -o robotworld-SteeringActuator.obj `if test -f 'SteeringActuator.cpp'; then $(CYGPATH_W) 'SteeringActuator.cpp'; else $(CYGPATH_W) '$(srcdir)/SteeringActuator.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-SteeringActuator.Tpo $(DEPDIR)/robotworld-SteeringActuator.Po
#	$(AM_V_CXX)source='SteeringActuator.cpp' object='robotworld-SteeringActuator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-SteeringActuator.obj `if test -f 'SteeringActuator.cpp'; then $(CYGPATH_W) 'SteeringActuator.cpp'; else $(CYGPATH_W) '$(srcdir)/SteeringActuator.cpp'; fi`

robotworld-ViewObject.o: ViewObject.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-ViewObject.o -MD -MP -MF $(DEPDIR)/robotworld-ViewObject.Tpo -c -o robotworld-ViewObject.o `test -f 'ViewObject.cpp' || echo '$(srcdir)/'`ViewObject.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-ViewObject.Tpo $(DEPDIR)/robotworld-ViewObject.Po
#	$(AM_V_CXX)source='ViewObject.cpp' object='robotworld-ViewObject.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-ViewObject.o `test -f 'ViewObject.cpp' || echo '$(srcdir)/'`ViewObject.cpp

robotworld-ViewObject.obj: ViewObject.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-ViewObject.obj -MD -MP -MF $(DEPDIR)/robotworld-ViewObject.Tpo -c -o robotworld-ViewObject.obj `if test -f 'ViewObject.cpp'; then $(CYGPATH_W) 'ViewObject.cpp'; else $(CYGPATH_W) '$(srcdir)/ViewObject.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-ViewObject.Tpo $(DEPDIR)/robotworld-ViewObject.Po
#	$(AM_V_CXX)source='ViewObject.cpp' object='robotworld-ViewObject.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-ViewObject.obj `if test -f 'ViewObject.cpp'; then $(CYGPATH_W) 'ViewObject.cpp'; else $(CYGPATH_W) '$(srcdir)/ViewObject.cpp'; fi`

robotworld-Wall.o: Wall.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Wall.o -MD -MP -MF $(DEPDIR)/robotworld-Wall.Tpo -c -o robotworld-Wall.o `test -f 'Wall.cpp' || echo '$(srcdir)/'`Wall.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Wall.Tpo $(DEPDIR)/robotworld-Wall.Po
#	$(AM_V_CXX)source='Wall.cpp' object='robotworld-Wall.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Wall.o `test -f 'Wall.cpp' || echo '$(srcdir)/'`Wall.cpp

robotworld-Wall.obj: Wall.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Wall.obj -MD -MP -MF $(DEPDIR)/robotworld-Wall.Tpo -c -o robotworld-Wall.obj `if test -f 'Wall.cpp'; then $(CYGPATH_W) 'Wall.cpp'; else $(CYGPATH_W) '$(srcdir)/Wall.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Wall.Tpo $(DEPDIR)/robotworld-Wall.Po
#	$(AM_V_CXX)source='Wall.cpp' object='robotworld-Wall.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Wall.obj `if test -f 'Wall.cpp'; then $(CYGPATH_W) 'Wall.cpp'; else $(CYGPATH_W) '$(srcdir)/Wall.cpp'; fi`

robotworld-WallShape.o: WallShape.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-WallShape.o -MD -MP -MF $(DEPDIR)/robotworld-WallShape.Tpo -c -o robotworld-WallShape.o `test -f 'WallShape.cpp' || echo '$(srcdir)/'`WallShape.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-WallShape.Tpo $(DEPDIR)/robotworld-WallShape.Po
#	$(AM_V_CXX)source='WallShape.cpp' object='robotworld-WallShape.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-WallShape.o `test -f 'WallShape.cpp' || echo '$(srcdir)/'`WallShape.cpp

robotworld-WallShape.obj: WallShape.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-WallShape.obj -MD -MP -MF $(DEPDIR)/robotworld-WallShape.Tpo -c -o robotworld-WallShape.obj `if test -f 'WallShape.cpp'; then $(CYGPATH_W) 'WallShape.cpp'; else $(CYGPATH_W) '$(srcdir)/WallShape.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-WallShape.Tpo $(DEPDIR)/robotworld-WallShape.Po
#	$(AM_V_CXX)source='WallShape.cpp' object='robotworld-WallShape.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-WallShape.obj `if test -f 'WallShape.cpp'; then $(CYGPATH_W) 'WallShape.cpp'; else $(CYGPATH_W) '$(srcdir)/WallShape.cpp'; fi`

robotworld-WayPoint.o: WayPoint.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-WayPoint.o -MD -MP -MF $(DEPDIR)/robotworld-WayPoint.Tpo -c -o robotworld-WayPoint.o `test -f 'WayPoint.cpp' || echo '$(srcdir)/'`WayPoint.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-WayPoint.Tpo $(DEPDIR)/robotworld-WayPoint.Po
#	$(AM_V_CXX)source='WayPoint.cpp' object='robotworld-WayPoint.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-WayPoint.o `test -f 'WayPoint.cpp' || echo '$(srcdir)/'`WayPoint.cpp

robotworld-WayPoint.obj: WayPoint.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-WayPoint.obj -MD -MP -MF $(DEPDIR)/robotworld-WayPoint.Tpo -c -o robotworld-WayPoint.obj `if test -f 'WayPoint.cpp'; then $(CYGPATH_W) 'WayPoint.cpp'; else $(CYGPATH_W) '$(srcdir)/WayPoint.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-WayPoint.Tpo $(DEPDIR)/robotworld-WayPoint.Po
#	$(AM_V_CXX)source='WayPoint.cpp' object='robotworld-WayPoint.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-WayPoint.obj `if test -f 'WayPoint.cpp'; then $(CYGPATH_W) 'WayPoint.cpp'; else $(CYGPATH_W) '$(srcdir)/WayPoint.cpp'; fi`

robotworld-WayPointShape.o: WayPointShape.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-WayPointShape.o -MD -MP -MF $(DEPDIR)/robotworld-WayPointShape.Tpo -c -o robotworld-WayPointShape.o `test -f 'WayPointShape.cpp' || echo '$(srcdir)/'`WayPointShape.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-WayPointShape.Tpo $(DEPDIR)/robotworld-WayPointShape.Po
#	$(AM_V_CXX)source='WayPointShape.cpp' object='robotworld-WayPointShape.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-WayPointShape.o `test -f 'WayPointShape.cpp' || echo '$(srcdir)/'`WayPointShape.cpp

robotworld-WayPointShape.obj: WayPointShape.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-WayPointShape.obj -MD -MP -MF $(DEPDIR)/robotworld-WayPointShape.Tpo -c -o robotworld-WayPointShape.obj `if test -f 'WayPointShape.cpp'; then $(CYGPATH_W) 'WayPointShape.cpp'; else $(CYGPATH_W) '$(srcdir)/WayPointShape.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-WayPointShape.Tpo $(DEPDIR)/robotworld-WayPointShape.Po
#	$(AM_V_CXX)source='WayPointShape.cpp' object='robotworld-WayPointShape.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-WayPointShape.obj `if test -f 'WayPointShape.cpp'; then $(CYGPATH_W) 'WayPointShape.cpp'; else $(CYGPATH_W) '$(srcdir)/WayPointShape.cpp'; fi`

robotworld-WidgetDebugTraceFunction.o: WidgetDebugTraceFunction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-WidgetDebugTraceFunction.o -MD -MP -MF $(DEPDIR)/robotworld-WidgetDebugTraceFunction.Tpo -c -o robotworld-WidgetDebugTraceFunction.o `test -f 'WidgetDebugTraceFunction.cpp' || echo '$(srcdir)/'`WidgetDebugTraceFunction.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-WidgetDebugTraceFunction.Tpo $(DEPDIR)/robotworld-WidgetDebugTraceFunction.Po
#	$(AM_V_CXX)source='WidgetDebugTraceFunction.cpp' object='robotworld-WidgetDebugTraceFunction.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-WidgetDebugTraceFunction.o `test -f 'WidgetDebugTraceFunction.cpp' || echo '$(srcdir)/'`WidgetDebugTraceFunction.cpp

robotworld-WidgetDebugTraceFunction.obj: WidgetDebugTraceFunction.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-WidgetDebugTraceFunction.obj -MD -MP -MF $(DEPDIR)/robotworld-WidgetDebugTraceFunction.Tpo -c -o robotworld-WidgetDebugTraceFunction.obj `if test -f 'WidgetDebugTraceFunction.cpp'; then $(CYGPATH_W) 'WidgetDebugTraceFunction.cpp'; else $(CYGPATH_W) '$(srcdir)/WidgetDebugTraceFunction.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-WidgetDebugTraceFunction.Tpo $(DEPDIR)/robotworld-WidgetDebugTraceFunction.Po
#	$(AM_V_CXX)source='WidgetDebugTraceFunction.cpp' object='robotworld-WidgetDebugTraceFunction.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-WidgetDebugTraceFunction.obj `if test -f 'WidgetDebugTraceFunction.cpp'; then $(CYGPATH_W) 'WidgetDebugTraceFunction.cpp'; else $(CYGPATH_W) '$(srcdir)/WidgetDebugTraceFunction.cpp'; fi`

robotworld-Widgets.o: Widgets.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Widgets.o -MD -MP -MF $(DEPDIR)/robotworld-Widgets.Tpo -c -o robotworld-Widgets.o `test -f 'Widgets.cpp' || echo '$(srcdir)/'`Widgets.cpp
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Widgets.Tpo $(DEPDIR)/robotworld-Widgets.Po
#	$(AM_V_CXX)source='Widgets.cpp' object='robotworld-Widgets.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Widgets.o `test -f 'Widgets.cpp' || echo '$(srcdir)/'`Widgets.cpp

robotworld-Widgets.obj: Widgets.cpp
	$(AM_V_CXX)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -MT robotworld-Widgets.obj -MD -MP -MF $(DEPDIR)/robotworld-Widgets.Tpo -c -o robotworld-Widgets.obj `if test -f 'Widgets.cpp'; then $(CYGPATH_W) 'Widgets.cpp'; else $(CYGPATH_W) '$(srcdir)/Widgets.cpp'; fi`
	$(AM_V_at)$(am__mv) $(DEPDIR)/robotworld-Widgets.Tpo $(DEPDIR)/robotworld-Widgets.Po
#	$(AM_V_CXX)source='Widgets.cpp' object='robotworld-Widgets.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(AM_V_CXX_no)$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(robotworld_CPPFLAGS) $(CPPFLAGS) $(robotworld_CXXFLAGS) $(CXXFLAGS) -c -o robotworld-Widgets.obj `if test -f 'Widgets.cpp'; then $(CYGPATH_W) 'Widgets.cpp'; else $(CYGPATH_W) '$(srcdir)/Widgets.cpp'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(am__tagged_files)
	$(am__define_uniq_tagged_files); mkid -fID $$unique
tags: tags-am
TAGS: tags

tags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	set x; \
	here=`pwd`; \
	$(am__define_uniq_tagged_files); \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: ctags-am

CTAGS: ctags
ctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)
	$(am__define_uniq_tagged_files); \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"
cscopelist: cscopelist-am

cscopelist-am: $(am__tagged_files)
	list='$(am__tagged_files)'; \
	case "$(srcdir)" in \
	  [\\/]* | ?:[\\/]*) sdir="$(srcdir)" ;; \
	  *) sdir=$(subdir)/$(srcdir) ;; \
	esac; \
	for i in $$list; do \
	  if test -f "$$i"; then \
	    echo "$(subdir)/$$i"; \
	  else \
	    echo "$$sdir/$$i"; \
	  fi; \
	done >> $(top_builddir)/cscope.files

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) config.h
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS

.MAKE: all install-am install-strip

.PHONY: CTAGS GTAGS TAGS all all-am check check-am clean \
	clean-binPROGRAMS clean-generic clean-libtool cscopelist-am \
	ctags ctags-am distclean distclean-compile distclean-generic \
	distclean-hdr distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags tags-am uninstall uninstall-am \
	uninstall-binPROGRAMS

.PRECIOUS: Makefile


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
